!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BentCapillary	.\myCapillary0A.py	/^class BentCapillary(roe.OE):$/;"	c
BentCapillary	.\realisticPolycapillary.py	/^class BentCapillary(roe.OE):$/;"	c
BentCapillary	.\simplfiedPolyCapillary.py	/^class BentCapillary(roe.OE):$/;"	c
Din	.\realisticPolycapillary.py	/^Din =   4.5     # lens entrance diameter$/;"	v
Dmax	.\realisticPolycapillary.py	/^Dmax =  2*hMax  # max diameter$/;"	v
Dout	.\realisticPolycapillary.py	/^Dout =  2.4     # lens exit diameter$/;"	v
E0	.\SourceViewer.py	/^E0      = 9000  # [eV]$/;"	v
E0	.\StraightCapillary.py	/^E0 = 9000.$/;"	v
E0	.\myCapillary0A.py	/^E0 = 9000.$/;"	v
E0	.\realisticPolycapillary.py	/^E0      = 9000.         # energy in electronoVolts$/;"	v
E0	.\simplfiedMonoCapillary.py	/^E0 = 9000.          # energy in electronoVolts$/;"	v
E0	.\simplfiedPolyCapillary.py	/^E0 = 9000.          # energy in electronoVolts$/;"	v
L_	.\simplfiedMonoCapillary.py	/^L_      = 100.0               # length of the lens$/;"	v
L_	.\simplfiedPolyCapillary.py	/^L_      = 100.0               # length of the lens$/;"	v
N_	.\SourceViewer.py	/^N_      = 11    # number of step to take$/;"	v
Pinhole	.\realisticPolycapillary.py	/^class Pinhole(roe.OE):$/;"	c
PlotMono	.\simplfiedMonoCapillary.py	/^import PlotMono$/;"	i
PlotMono	.\simplfiedPolyCapillary.py	/^import PlotMono$/;"	i
StraightCapillary	.\StraightCapillary.py	/^class StraightCapillary(roe.OE):$/;"	c
StraightCapillary	.\simplfiedMonoCapillary.py	/^class StraightCapillary(roe.OE):$/;"	c
__init__	.\StraightCapillary.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:StraightCapillary
__init__	.\myCapillary0A.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:BentCapillary
__init__	.\realisticPolycapillary.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:BentCapillary
__init__	.\realisticPolycapillary.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Pinhole
__init__	.\simplfiedMonoCapillary.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:StraightCapillary
__init__	.\simplfiedPolyCapillary.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:BentCapillary
a_	.\simplfiedMonoCapillary.py	/^a_      = -L_\/2.0\/np.arcsinh(-y_in\/rS)$/;"	v
ax1	.\LensPolynomial.py	/^    ax1 = plt.subplot(111, label='dupa')$/;"	v
ax1	.\solverTesting.py	/^    ax1 = plt.subplot(111, label='dupa')$/;"	v
backends	.\SourceViewer.py	/^import xrt.backends.raycing as raycing$/;"	i
backends	.\SourceViewer.py	/^import xrt.backends.raycing.materials as rm$/;"	i
backends	.\SourceViewer.py	/^import xrt.backends.raycing.oes as roe$/;"	i
backends	.\SourceViewer.py	/^import xrt.backends.raycing.run as rr$/;"	i
backends	.\SourceViewer.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
backends	.\SourceViewer.py	/^import xrt.backends.raycing.sources as rs$/;"	i
backends	.\StraightCapillary.py	/^import xrt.backends.raycing as raycing$/;"	i
backends	.\StraightCapillary.py	/^import xrt.backends.raycing.materials as rm$/;"	i
backends	.\StraightCapillary.py	/^import xrt.backends.raycing.oes as roe$/;"	i
backends	.\StraightCapillary.py	/^import xrt.backends.raycing.run as rr$/;"	i
backends	.\StraightCapillary.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
backends	.\StraightCapillary.py	/^import xrt.backends.raycing.sources as rs$/;"	i
backends	.\myCapillary0A.py	/^import xrt.backends.raycing as raycing$/;"	i
backends	.\myCapillary0A.py	/^import xrt.backends.raycing.materials as rm$/;"	i
backends	.\myCapillary0A.py	/^import xrt.backends.raycing.oes as roe$/;"	i
backends	.\myCapillary0A.py	/^import xrt.backends.raycing.run as rr$/;"	i
backends	.\myCapillary0A.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
backends	.\myCapillary0A.py	/^import xrt.backends.raycing.sources as rs$/;"	i
backends	.\realisticPolycapillary.py	/^import xrt.backends.raycing as raycing$/;"	i
backends	.\realisticPolycapillary.py	/^import xrt.backends.raycing.materials as rm$/;"	i
backends	.\realisticPolycapillary.py	/^import xrt.backends.raycing.oes as roe$/;"	i
backends	.\realisticPolycapillary.py	/^import xrt.backends.raycing.run as rr$/;"	i
backends	.\realisticPolycapillary.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
backends	.\realisticPolycapillary.py	/^import xrt.backends.raycing.sources as rs$/;"	i
backends	.\screening.py	/^import xrt.backends.raycing as raycing$/;"	i
backends	.\screening.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
backends	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing as raycing$/;"	i
backends	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing.materials as rm$/;"	i
backends	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing.oes as roe$/;"	i
backends	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing.run as rr$/;"	i
backends	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
backends	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing.sources as rs$/;"	i
backends	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing as raycing$/;"	i
backends	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing.materials as rm$/;"	i
backends	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing.oes as roe$/;"	i
backends	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing.run as rr$/;"	i
backends	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
backends	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing.sources as rs$/;"	i
bl_height	.\SourceViewer.py	/^bl_height   = 0.$/;"	v
bl_xzMax	.\SourceViewer.py	/^bl_xzMax    = 0.$/;"	v
build_beamline	.\SourceViewer.py	/^def build_beamline(nrays=1000):$/;"	f
build_beamline	.\StraightCapillary.py	/^def build_beamline(nrays=1000):$/;"	f
build_beamline	.\myCapillary0A.py	/^def build_beamline(nrays=1000):$/;"	f
build_beamline	.\realisticPolycapillary.py	/^def build_beamline(nrays=1e4):$/;"	f
build_beamline	.\simplfiedMonoCapillary.py	/^def build_beamline(nrays=1e5):$/;"	f
build_beamline	.\simplfiedPolyCapillary.py	/^def build_beamline(nrays=1e4):$/;"	f
createPlots	.\screening.py	/^def createPlots(beamLine):$/;"	f
createScreens	.\screening.py	/^def createScreens(beamLine, ranges, howmany):$/;"	f
cunter	.\screening.py	/^cunter = 0$/;"	v
diff_coeffs	.\LensPolynomial.py	/^def diff_coeffs(x):$/;"	f
diff_coeffs	.\solverTesting.py	/^def diff_coeffs(x):$/;"	f
distx	.\SourceViewer.py	/^distx       = 'flat'$/;"	v
distx	.\realisticPolycapillary.py	/^distx       = 'flat'$/;"	v
distx	.\simplfiedMonoCapillary.py	/^distx       = 'flat'$/;"	v
distx	.\simplfiedPolyCapillary.py	/^distx       = 'flat'$/;"	v
distxprime	.\SourceViewer.py	/^distxprime  = 'normal'$/;"	v
distxprime	.\realisticPolycapillary.py	/^distxprime  = 'normal'$/;"	v
distxprime	.\simplfiedMonoCapillary.py	/^distxprime  = 'normal'$/;"	v
distxprime	.\simplfiedPolyCapillary.py	/^distxprime  = 'normal'$/;"	v
distz	.\SourceViewer.py	/^distz       = 'flat'$/;"	v
distz	.\realisticPolycapillary.py	/^distz       = 'flat'$/;"	v
distz	.\simplfiedMonoCapillary.py	/^distz       = 'flat'$/;"	v
distz	.\simplfiedPolyCapillary.py	/^distz       = 'flat'$/;"	v
distzprime	.\SourceViewer.py	/^distzprime  = 'normal'$/;"	v
distzprime	.\realisticPolycapillary.py	/^distzprime  = 'normal'$/;"	v
distzprime	.\simplfiedMonoCapillary.py	/^distzprime  = 'normal'$/;"	v
distzprime	.\simplfiedPolyCapillary.py	/^distzprime  = 'normal'$/;"	v
dx	.\SourceViewer.py	/^dx          = 0.1$/;"	v
dx	.\realisticPolycapillary.py	/^dx          = 0.1$/;"	v
dx	.\simplfiedMonoCapillary.py	/^dx          = 0.1$/;"	v
dx	.\simplfiedPolyCapillary.py	/^dx          = 0.1$/;"	v
dxprime	.\SourceViewer.py	/^dxprime     = 0.1$/;"	v
dxprime	.\realisticPolycapillary.py	/^dxprime     = 0.1$/;"	v
dxprime	.\simplfiedMonoCapillary.py	/^dxprime     = 0.1$/;"	v
dxprime	.\simplfiedPolyCapillary.py	/^dxprime     = 0.1$/;"	v
dz	.\SourceViewer.py	/^dz          = 0.1$/;"	v
dz	.\realisticPolycapillary.py	/^dz          = 0.1$/;"	v
dz	.\simplfiedMonoCapillary.py	/^dz          = 0.1$/;"	v
dz	.\simplfiedPolyCapillary.py	/^dz          = 0.1$/;"	v
dzprime	.\SourceViewer.py	/^dzprime     = 0.1$/;"	v
dzprime	.\realisticPolycapillary.py	/^dzprime     = 0.1$/;"	v
dzprime	.\simplfiedMonoCapillary.py	/^dzprime     = 0.1$/;"	v
dzprime	.\simplfiedPolyCapillary.py	/^dzprime     = 0.1$/;"	v
exposeScreens	.\screening.py	/^def exposeScreens(beamLine, beamToBeSeen, _range):$/;"	f
f	.\StraightCapillary.py	/^f = 450. # y length in mm from foucs to the end of the lens$/;"	v
f	.\myCapillary0A.py	/^f = 500. # y length in mm from foucs to the end of the lens$/;"	v
f	.\simplfiedMonoCapillary.py	/^f       = rSample + L_     # y length in mm from foucs to the end of the lens$/;"	v
f	.\simplfiedPolyCapillary.py	/^f       = rSample + L_     # y length in mm from foucs to the end of the lens$/;"	v
fig1	.\LensPolynomial.py	/^    fig1 = plt.figure(1,figsize=(10,4))$/;"	v
fig1	.\solverTesting.py	/^    fig1 = plt.figure(1,figsize=(10,4))$/;"	v
getPolyCoeffs	.\LensPolynomial.py	/^def getPolyCoeffs(y0,y1,ym,y2,y3,h1,Din,Dout,hMax):$/;"	f
getPolyCoeffs	.\realisticPolycapillary.py	/^from LensPolynomial import getPolyCoeffs$/;"	i
getPolyCoeffs	.\solverTesting.py	/^def getPolyCoeffs(x0,x1,xm,x2,x3,h1,hm,h2):$/;"	f
h2	.\LensPolynomial.py	/^    h2 = h1 * Dout\/Din$/;"	v
h2	.\solverTesting.py	/^    h2 = h1 * Dout\/Din$/;"	v
hMax	.\LensPolynomial.py	/^    hMax = 4.$/;"	v
hMax	.\realisticPolycapillary.py	/^hMax =  4.0     # maximum possible distance from y = 0 axis$/;"	v
hm	.\solverTesting.py	/^    hm = 4. * h1\/(Din\/2.)$/;"	v
io	.\simplfiedMonoCapillary.py	/^import scipy.io$/;"	i
io	.\simplfiedPolyCapillary.py	/^import scipy.io$/;"	i
layers	.\StraightCapillary.py	/^layers = 10 # number of hexagonal layers$/;"	v
layers	.\myCapillary0A.py	/^layers = 10 # number of hexagonal layers$/;"	v
local_n	.\StraightCapillary.py	/^    def local_n(self, s, phi):$/;"	m	class:StraightCapillary
local_n	.\myCapillary0A.py	/^    def local_n(self, s, phi):$/;"	m	class:BentCapillary
local_n	.\realisticPolycapillary.py	/^    def local_n(self, s, phi):$/;"	m	class:BentCapillary
local_n	.\realisticPolycapillary.py	/^    def local_n(self, s, phi):$/;"	m	class:Pinhole
local_n	.\simplfiedMonoCapillary.py	/^    def local_n(self, s, phi):$/;"	m	class:StraightCapillary
local_n	.\simplfiedPolyCapillary.py	/^    def local_n(self, s, phi):$/;"	m	class:BentCapillary
local_r	.\StraightCapillary.py	/^    def local_r(self, s, phi):$/;"	m	class:StraightCapillary
local_r	.\myCapillary0A.py	/^    def local_r(self, s, phi):$/;"	m	class:BentCapillary
local_r	.\realisticPolycapillary.py	/^    def local_r(self, s, phi):$/;"	m	class:BentCapillary
local_r	.\realisticPolycapillary.py	/^    def local_r(self, s, phi):$/;"	m	class:Pinhole
local_r	.\simplfiedMonoCapillary.py	/^    def local_r(self, s, phi):$/;"	m	class:StraightCapillary
local_r	.\simplfiedPolyCapillary.py	/^    def local_r(self, s, phi):$/;"	m	class:BentCapillary
local_r0	.\StraightCapillary.py	/^    def local_r0(self, s):  # radius of capillary (s)$/;"	m	class:StraightCapillary
local_r0	.\myCapillary0A.py	/^    def local_r0(self, s):  # radius of capillary (s)$/;"	m	class:BentCapillary
local_r0	.\realisticPolycapillary.py	/^    def local_r0(self, s):$/;"	m	class:BentCapillary
local_r0	.\realisticPolycapillary.py	/^    def local_r0(self, s):$/;"	m	class:Pinhole
local_r0	.\simplfiedMonoCapillary.py	/^    def local_r0(self, s):  # radius of capillary (s)$/;"	m	class:StraightCapillary
local_r0	.\simplfiedPolyCapillary.py	/^    def local_r0(self, s):  # radius of capillary (s)$/;"	m	class:BentCapillary
local_r0Prime	.\StraightCapillary.py	/^    def local_r0Prime(self, s):$/;"	m	class:StraightCapillary
local_r0Prime	.\myCapillary0A.py	/^    def local_r0Prime(self, s):$/;"	m	class:BentCapillary
local_r0Prime	.\realisticPolycapillary.py	/^    def local_r0Prime(self, s):$/;"	m	class:Pinhole
local_r0Prime	.\realisticPolycapillary.py	/^    def local_r0Prime(self,s):$/;"	m	class:BentCapillary
local_r0Prime	.\simplfiedMonoCapillary.py	/^    def local_r0Prime(self, s):$/;"	m	class:StraightCapillary
local_r0Prime	.\simplfiedPolyCapillary.py	/^    def local_r0Prime(self, s):$/;"	m	class:BentCapillary
local_x0	.\StraightCapillary.py	/^    def local_x0(self, s):  # axis of capillary, x(s)$/;"	m	class:StraightCapillary
local_x0	.\myCapillary0A.py	/^    def local_x0(self, s):  # axis of capillary, x(s)$/;"	m	class:BentCapillary
local_x0	.\realisticPolycapillary.py	/^    def local_x0(self, s):$/;"	m	class:BentCapillary
local_x0	.\realisticPolycapillary.py	/^    def local_x0(self, s):$/;"	m	class:Pinhole
local_x0	.\simplfiedMonoCapillary.py	/^    def local_x0(self, s):  # axis of capillary, x(s)$/;"	m	class:StraightCapillary
local_x0	.\simplfiedPolyCapillary.py	/^    def local_x0(self, s):  # axis of capillary, x(s)$/;"	m	class:BentCapillary
local_x0Prime	.\StraightCapillary.py	/^    def local_x0Prime(self, s):$/;"	m	class:StraightCapillary
local_x0Prime	.\myCapillary0A.py	/^    def local_x0Prime(self, s):$/;"	m	class:BentCapillary
local_x0Prime	.\realisticPolycapillary.py	/^    def local_x0Prime(self, s):$/;"	m	class:BentCapillary
local_x0Prime	.\realisticPolycapillary.py	/^    def local_x0Prime(self, s):$/;"	m	class:Pinhole
local_x0Prime	.\simplfiedMonoCapillary.py	/^    def local_x0Prime(self, s):$/;"	m	class:StraightCapillary
local_x0Prime	.\simplfiedPolyCapillary.py	/^    def local_x0Prime(self, s):$/;"	m	class:BentCapillary
mGlass	.\StraightCapillary.py	/^mGlass = rm.Material(('Si', 'O'), quantities=(1, 2), rho=2.2)$/;"	v
mGlass	.\myCapillary0A.py	/^mGlass = rm.Material(('Si', 'O'), quantities=(1, 2), rho=2.2)$/;"	v
mGlass	.\realisticPolycapillary.py	/^mGlass  = rm.Material(('Si', 'O'), quantities=(1, 2), rho=2.2)$/;"	v
mGlass	.\simplfiedMonoCapillary.py	/^mGlass = rm.Material(('Si', 'O'), quantities=(1, 2), rho=2.2)$/;"	v
mGlass	.\simplfiedPolyCapillary.py	/^mGlass = rm.Material(('Si', 'O'), quantities=(1, 2), rho=2.2)$/;"	v
main	.\SourceViewer.py	/^def main():$/;"	f
main	.\StraightCapillary.py	/^def main():$/;"	f
main	.\myCapillary0A.py	/^def main():$/;"	f
main	.\realisticPolycapillary.py	/^def main():$/;"	f
main	.\simplfiedMonoCapillary.py	/^def main():$/;"	f
main	.\simplfiedPolyCapillary.py	/^def main():$/;"	f
matplotlib	.\LensPolynomial.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	.\PlotMono.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	.\StraightCapillary.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	.\myCapillary0A.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	.\realisticPolycapillary.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	.\simplfiedMonoCapillary.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	.\simplfiedPolyCapillary.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	.\solverTesting.py	/^import matplotlib.pyplot as plt$/;"	i
max_plots	.\simplfiedMonoCapillary.py	/^max_plots = 0                   # for imaging different position at once| 0=off$/;"	v
max_plots	.\simplfiedPolyCapillary.py	/^max_plots = 0                   # for imaging different position at once| 0=off$/;"	v
min_d	.\SourceViewer.py	/^min_d   = 0     # [mm] | source - screen distance$/;"	v
mpl	.\StraightCapillary.py	/^import matplotlib as mpl$/;"	i
mpl	.\myCapillary0A.py	/^import matplotlib as mpl$/;"	i
mpl	.\realisticPolycapillary.py	/^import matplotlib as mpl$/;"	i
mpl	.\simplfiedMonoCapillary.py	/^import matplotlib as mpl$/;"	i
mpl	.\simplfiedPolyCapillary.py	/^import matplotlib as mpl$/;"	i
nRefl	.\StraightCapillary.py	/^nRefl = 12$/;"	v
nRefl	.\myCapillary0A.py	/^nRefl = 12$/;"	v
nRefl	.\realisticPolycapillary.py	/^nRefl   = 125           # number of reflections$/;"	v
nRefl	.\simplfiedMonoCapillary.py	/^nRefl = 150         # number of reflections$/;"	v
nRefl	.\simplfiedPolyCapillary.py	/^nRefl = 170         # number of reflections$/;"	v
nReflDisp	.\StraightCapillary.py	/^nReflDisp = 12 # unused$/;"	v
nReflDisp	.\myCapillary0A.py	/^nReflDisp = 12 # unused$/;"	v
np	.\LensPolynomial.py	/^import numpy as np$/;"	i
np	.\PlotMono.py	/^import numpy as np$/;"	i
np	.\SourceViewer.py	/^import numpy as np$/;"	i
np	.\StraightCapillary.py	/^import numpy as np$/;"	i
np	.\myCapillary0A.py	/^import numpy as np$/;"	i
np	.\realisticPolycapillary.py	/^import numpy as np$/;"	i
np	.\screening.py	/^import numpy as np$/;"	i
np	.\simplfiedMonoCapillary.py	/^import numpy as np$/;"	i
np	.\simplfiedPolyCapillary.py	/^import numpy as np$/;"	i
np	.\solverTesting.py	/^import numpy as np$/;"	i
p	.\LensPolynomial.py	/^    p = getPolyCoeffs(y0,y1,ym,y2,y3,h1,Din,Dout,hMax)$/;"	v
p	.\solverTesting.py	/^    p = getPolyCoeffs(x0,x1,xm,x2,x3,h1,hm,h2)$/;"	v
param_to_xyz	.\StraightCapillary.py	/^    def param_to_xyz(self, s, phi, r):$/;"	m	class:StraightCapillary
param_to_xyz	.\myCapillary0A.py	/^    def param_to_xyz(self, s, phi, r):$/;"	m	class:BentCapillary
param_to_xyz	.\realisticPolycapillary.py	/^    def param_to_xyz(self, s, phi, r):$/;"	m	class:BentCapillary
param_to_xyz	.\realisticPolycapillary.py	/^    def param_to_xyz(self, s, phi, r):$/;"	m	class:Pinhole
param_to_xyz	.\simplfiedMonoCapillary.py	/^    def param_to_xyz(self, s, phi, r):$/;"	m	class:StraightCapillary
param_to_xyz	.\simplfiedPolyCapillary.py	/^    def param_to_xyz(self, s, phi, r):$/;"	m	class:BentCapillary
persistentName	.\simplfiedMonoCapillary.py	/^persistentName='pickle\/mono_cap_at_exit.pickle' #'phase_space__energy.pickle'$/;"	v
persistentName	.\simplfiedPolyCapillary.py	/^persistentName = 'pickle\/polyCapExit.pickle' #'realSpae.pickle' $/;"	v
pinlen	.\realisticPolycapillary.py	/^pinlen  = 0.1           # length$/;"	v
plot2D	.\PlotMono.py	/^def plot2D(beamLine):$/;"	f
plot2D	.\StraightCapillary.py	/^def plot2D():$/;"	f
plot2D	.\myCapillary0A.py	/^def plot2D():$/;"	f
plot2D	.\realisticPolycapillary.py	/^from PlotMono import plot2D$/;"	i
plot2D_yLim	.\StraightCapillary.py	/^plot2D_yLim = [-0.05, 0.05]$/;"	v
plot_main_lim	.\StraightCapillary.py	/^plot_main_lim = 1.5$/;"	v
plt	.\LensPolynomial.py	/^import matplotlib.pyplot as plt$/;"	i
plt	.\PlotMono.py	/^import matplotlib.pyplot as plt$/;"	i
plt	.\StraightCapillary.py	/^import matplotlib.pyplot as plt$/;"	i
plt	.\myCapillary0A.py	/^import matplotlib.pyplot as plt$/;"	i
plt	.\realisticPolycapillary.py	/^import matplotlib.pyplot as plt$/;"	i
plt	.\simplfiedMonoCapillary.py	/^import matplotlib.pyplot as plt$/;"	i
plt	.\simplfiedPolyCapillary.py	/^import matplotlib.pyplot as plt$/;"	i
plt	.\solverTesting.py	/^import matplotlib.pyplot as plt$/;"	i
processes	.\SourceViewer.py	/^processes = 8$/;"	v
r0	.\StraightCapillary.py	/^r0 = 0.07$/;"	v
r0	.\myCapillary0A.py	/^r0 = 0.0030$/;"	v
r0	.\simplfiedMonoCapillary.py	/^r0 = 0.002*1$/;"	v
r0	.\simplfiedPolyCapillary.py	/^r0 = 0.002*1$/;"	v
rIn	.\realisticPolycapillary.py	/^rIn =   0.01*10     # lens radius$/;"	v
rMax	.\realisticPolycapillary.py	/^rMax = Dmax\/Din * rIn # Max value of local radius$/;"	v
rOut	.\StraightCapillary.py	/^rOut = 0.02$/;"	v
rOut	.\realisticPolycapillary.py	/^rOut = Dout\/Din * rIn # Radius must shrink alongside the lens$/;"	v
rOut	.\simplfiedMonoCapillary.py	/^rOut = 0.002*1$/;"	v
rOut	.\simplfiedPolyCapillary.py	/^rOut = 0.002*1$/;"	v
rS	.\simplfiedMonoCapillary.py	/^rS      = float(rSample)    # light source - capillary distance $/;"	v
rS	.\simplfiedPolyCapillary.py	/^rS      = float(rSample)    # light source - capillary distance $/;"	v
rSample	.\StraightCapillary.py	/^rSample = 100. # starting position of the lens$/;"	v
rSample	.\myCapillary0A.py	/^rSample = 100. # starting position of the lens$/;"	v
rSample	.\simplfiedMonoCapillary.py	/^rSample = 30.0              # starting position of the lens$/;"	v
rSample	.\simplfiedPolyCapillary.py	/^rSample = 30.0              # starting position of the lens$/;"	v
raycing	.\SourceViewer.py	/^import xrt.backends.raycing as raycing$/;"	i
raycing	.\SourceViewer.py	/^import xrt.backends.raycing.materials as rm$/;"	i
raycing	.\SourceViewer.py	/^import xrt.backends.raycing.oes as roe$/;"	i
raycing	.\SourceViewer.py	/^import xrt.backends.raycing.run as rr$/;"	i
raycing	.\SourceViewer.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
raycing	.\SourceViewer.py	/^import xrt.backends.raycing.sources as rs$/;"	i
raycing	.\StraightCapillary.py	/^import xrt.backends.raycing as raycing$/;"	i
raycing	.\StraightCapillary.py	/^import xrt.backends.raycing.materials as rm$/;"	i
raycing	.\StraightCapillary.py	/^import xrt.backends.raycing.oes as roe$/;"	i
raycing	.\StraightCapillary.py	/^import xrt.backends.raycing.run as rr$/;"	i
raycing	.\StraightCapillary.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
raycing	.\StraightCapillary.py	/^import xrt.backends.raycing.sources as rs$/;"	i
raycing	.\myCapillary0A.py	/^import xrt.backends.raycing as raycing$/;"	i
raycing	.\myCapillary0A.py	/^import xrt.backends.raycing.materials as rm$/;"	i
raycing	.\myCapillary0A.py	/^import xrt.backends.raycing.oes as roe$/;"	i
raycing	.\myCapillary0A.py	/^import xrt.backends.raycing.run as rr$/;"	i
raycing	.\myCapillary0A.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
raycing	.\myCapillary0A.py	/^import xrt.backends.raycing.sources as rs$/;"	i
raycing	.\realisticPolycapillary.py	/^import xrt.backends.raycing as raycing$/;"	i
raycing	.\realisticPolycapillary.py	/^import xrt.backends.raycing.materials as rm$/;"	i
raycing	.\realisticPolycapillary.py	/^import xrt.backends.raycing.oes as roe$/;"	i
raycing	.\realisticPolycapillary.py	/^import xrt.backends.raycing.run as rr$/;"	i
raycing	.\realisticPolycapillary.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
raycing	.\realisticPolycapillary.py	/^import xrt.backends.raycing.sources as rs$/;"	i
raycing	.\screening.py	/^import xrt.backends.raycing as raycing$/;"	i
raycing	.\screening.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
raycing	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing as raycing$/;"	i
raycing	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing.materials as rm$/;"	i
raycing	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing.oes as roe$/;"	i
raycing	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing.run as rr$/;"	i
raycing	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
raycing	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing.sources as rs$/;"	i
raycing	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing as raycing$/;"	i
raycing	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing.materials as rm$/;"	i
raycing	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing.oes as roe$/;"	i
raycing	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing.run as rr$/;"	i
raycing	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
raycing	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing.sources as rs$/;"	i
repeats	.\SourceViewer.py	/^repeats = 1e4   # liczba$/;"	v
repeats	.\StraightCapillary.py	/^repeats = 1500 # number of ray traycing iterations$/;"	v
repeats	.\realisticPolycapillary.py	/^repeats = 5e4           # number of ray traycing iterations$/;"	v
repeats	.\simplfiedMonoCapillary.py	/^repeats = 5e4       # number of ray traycing iterations$/;"	v
repeats	.\simplfiedPolyCapillary.py	/^repeats = 5e4       # number of ray traycing iterations$/;"	v
rm	.\SourceViewer.py	/^import xrt.backends.raycing.materials as rm$/;"	i
rm	.\StraightCapillary.py	/^import xrt.backends.raycing.materials as rm$/;"	i
rm	.\myCapillary0A.py	/^import xrt.backends.raycing.materials as rm$/;"	i
rm	.\realisticPolycapillary.py	/^import xrt.backends.raycing.materials as rm$/;"	i
rm	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing.materials as rm$/;"	i
rm	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing.materials as rm$/;"	i
roe	.\SourceViewer.py	/^import xrt.backends.raycing.oes as roe$/;"	i
roe	.\StraightCapillary.py	/^import xrt.backends.raycing.oes as roe$/;"	i
roe	.\myCapillary0A.py	/^import xrt.backends.raycing.oes as roe$/;"	i
roe	.\realisticPolycapillary.py	/^import xrt.backends.raycing.oes as roe$/;"	i
roe	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing.oes as roe$/;"	i
roe	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing.oes as roe$/;"	i
rpin	.\realisticPolycapillary.py	/^rpin    = 0.005*20         # Pinhole radius [mm] $/;"	v
rr	.\SourceViewer.py	/^import xrt.backends.raycing.run as rr$/;"	i
rr	.\StraightCapillary.py	/^import xrt.backends.raycing.run as rr$/;"	i
rr	.\myCapillary0A.py	/^import xrt.backends.raycing.run as rr$/;"	i
rr	.\realisticPolycapillary.py	/^import xrt.backends.raycing.run as rr$/;"	i
rr	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing.run as rr$/;"	i
rr	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing.run as rr$/;"	i
rs	.\SourceViewer.py	/^import xrt.backends.raycing.sources as rs$/;"	i
rs	.\StraightCapillary.py	/^import xrt.backends.raycing.sources as rs$/;"	i
rs	.\myCapillary0A.py	/^import xrt.backends.raycing.sources as rs$/;"	i
rs	.\realisticPolycapillary.py	/^import xrt.backends.raycing.sources as rs$/;"	i
rs	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing.sources as rs$/;"	i
rs	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing.sources as rs$/;"	i
rsc	.\SourceViewer.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
rsc	.\StraightCapillary.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
rsc	.\myCapillary0A.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
rsc	.\realisticPolycapillary.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
rsc	.\screening.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
rsc	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
rsc	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
run_process	.\SourceViewer.py	/^def run_process(beamLine, shineOnly1stSource=False):$/;"	f
run_process	.\StraightCapillary.py	/^def run_process(beamLine, shineOnly1stSource=False):$/;"	f
run_process	.\myCapillary0A.py	/^def run_process(beamLine, shineOnly1stSource=False):$/;"	f
run_process	.\realisticPolycapillary.py	/^def run_process(beamLine, shineOnly1stSource=False):$/;"	f
run_process	.\simplfiedMonoCapillary.py	/^def run_process(beamLine, shineOnly1stSource=False):$/;"	f
run_process	.\simplfiedPolyCapillary.py	/^def run_process(beamLine, shineOnly1stSource=False):$/;"	f
scipy	.\simplfiedMonoCapillary.py	/^import scipy.io$/;"	i
scipy	.\simplfiedPolyCapillary.py	/^import scipy.io$/;"	i
scr	.\realisticPolycapillary.py	/^import screening as scr$/;"	i
screen1_pos	.\simplfiedMonoCapillary.py	/^screen1_pos = rSample     # not really used$/;"	v
screen1_pos	.\simplfiedPolyCapillary.py	/^screen1_pos = rSample     # not really used$/;"	v
screen2_pos	.\StraightCapillary.py	/^screen2_pos = f + 400$/;"	v
screen2_pos	.\simplfiedMonoCapillary.py	/^screen2_pos = f + 0             # first image position outside capillary$/;"	v
screen2_pos	.\simplfiedPolyCapillary.py	/^screen2_pos = f + 0             # first image position outside capillary$/;"	v
setUsed	.\screening.py	/^def setUsed(beamLine, _range):$/;"	f
shape_coeffs	.\LensPolynomial.py	/^def shape_coeffs(x):$/;"	f
shape_coeffs	.\solverTesting.py	/^def shape_coeffs(x):$/;"	f
step	.\SourceViewer.py	/^step    = 4     # [mm] | screen step size$/;"	v
wall	.\StraightCapillary.py	/^wall = 0.02$/;"	v
wall	.\myCapillary0A.py	/^wall = 0.02$/;"	v
wall	.\realisticPolycapillary.py	/^wall=   0.0005 * 4 # |*50 make wider walls for structure visibility$/;"	v
wall	.\simplfiedMonoCapillary.py	/^wall = 0.0005$/;"	v
wall	.\simplfiedPolyCapillary.py	/^wall = 0.0005$/;"	v
x	.\LensPolynomial.py	/^    x = np.linspace(y1,y2,1000)$/;"	v
x	.\solverTesting.py	/^    x = np.linspace(x1,x2,1000)$/;"	v
xLimits	.\SourceViewer.py	/^xLimits = [-6.05, 6.05] # Plot limits$/;"	v
x_0	.\simplfiedPolyCapillary.py	/^x_0		= 0.5$/;"	v
xrt	.\SourceViewer.py	/^import xrt.backends.raycing as raycing$/;"	i
xrt	.\SourceViewer.py	/^import xrt.backends.raycing.materials as rm$/;"	i
xrt	.\SourceViewer.py	/^import xrt.backends.raycing.oes as roe$/;"	i
xrt	.\SourceViewer.py	/^import xrt.backends.raycing.run as rr$/;"	i
xrt	.\SourceViewer.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
xrt	.\SourceViewer.py	/^import xrt.backends.raycing.sources as rs$/;"	i
xrt	.\SourceViewer.py	/^import xrt.plotter as xrtp$/;"	i
xrt	.\SourceViewer.py	/^import xrt.runner as xrtr$/;"	i
xrt	.\StraightCapillary.py	/^import xrt.backends.raycing as raycing$/;"	i
xrt	.\StraightCapillary.py	/^import xrt.backends.raycing.materials as rm$/;"	i
xrt	.\StraightCapillary.py	/^import xrt.backends.raycing.oes as roe$/;"	i
xrt	.\StraightCapillary.py	/^import xrt.backends.raycing.run as rr$/;"	i
xrt	.\StraightCapillary.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
xrt	.\StraightCapillary.py	/^import xrt.backends.raycing.sources as rs$/;"	i
xrt	.\StraightCapillary.py	/^import xrt.plotter as xrtp$/;"	i
xrt	.\StraightCapillary.py	/^import xrt.runner as xrtr$/;"	i
xrt	.\myCapillary0A.py	/^import xrt.backends.raycing as raycing$/;"	i
xrt	.\myCapillary0A.py	/^import xrt.backends.raycing.materials as rm$/;"	i
xrt	.\myCapillary0A.py	/^import xrt.backends.raycing.oes as roe$/;"	i
xrt	.\myCapillary0A.py	/^import xrt.backends.raycing.run as rr$/;"	i
xrt	.\myCapillary0A.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
xrt	.\myCapillary0A.py	/^import xrt.backends.raycing.sources as rs$/;"	i
xrt	.\myCapillary0A.py	/^import xrt.plotter as xrtp$/;"	i
xrt	.\myCapillary0A.py	/^import xrt.runner as xrtr$/;"	i
xrt	.\realisticPolycapillary.py	/^import xrt.backends.raycing as raycing$/;"	i
xrt	.\realisticPolycapillary.py	/^import xrt.backends.raycing.materials as rm$/;"	i
xrt	.\realisticPolycapillary.py	/^import xrt.backends.raycing.oes as roe$/;"	i
xrt	.\realisticPolycapillary.py	/^import xrt.backends.raycing.run as rr$/;"	i
xrt	.\realisticPolycapillary.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
xrt	.\realisticPolycapillary.py	/^import xrt.backends.raycing.sources as rs$/;"	i
xrt	.\realisticPolycapillary.py	/^import xrt.plotter as xrtp$/;"	i
xrt	.\realisticPolycapillary.py	/^import xrt.runner as xrtr$/;"	i
xrt	.\screening.py	/^import xrt.backends.raycing as raycing$/;"	i
xrt	.\screening.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
xrt	.\screening.py	/^import xrt.plotter as xrtp$/;"	i
xrt	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing as raycing$/;"	i
xrt	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing.materials as rm$/;"	i
xrt	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing.oes as roe$/;"	i
xrt	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing.run as rr$/;"	i
xrt	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
xrt	.\simplfiedMonoCapillary.py	/^import xrt.backends.raycing.sources as rs$/;"	i
xrt	.\simplfiedMonoCapillary.py	/^import xrt.plotter as xrtp$/;"	i
xrt	.\simplfiedMonoCapillary.py	/^import xrt.runner as xrtr$/;"	i
xrt	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing as raycing$/;"	i
xrt	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing.materials as rm$/;"	i
xrt	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing.oes as roe$/;"	i
xrt	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing.run as rr$/;"	i
xrt	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing.screens as rsc$/;"	i
xrt	.\simplfiedPolyCapillary.py	/^import xrt.backends.raycing.sources as rs$/;"	i
xrt	.\simplfiedPolyCapillary.py	/^import xrt.plotter as xrtp$/;"	i
xrt	.\simplfiedPolyCapillary.py	/^import xrt.runner as xrtr$/;"	i
xrtp	.\SourceViewer.py	/^import xrt.plotter as xrtp$/;"	i
xrtp	.\StraightCapillary.py	/^import xrt.plotter as xrtp$/;"	i
xrtp	.\myCapillary0A.py	/^import xrt.plotter as xrtp$/;"	i
xrtp	.\realisticPolycapillary.py	/^import xrt.plotter as xrtp$/;"	i
xrtp	.\screening.py	/^import xrt.plotter as xrtp$/;"	i
xrtp	.\simplfiedMonoCapillary.py	/^import xrt.plotter as xrtp$/;"	i
xrtp	.\simplfiedPolyCapillary.py	/^import xrt.plotter as xrtp$/;"	i
xrtr	.\SourceViewer.py	/^import xrt.runner as xrtr$/;"	i
xrtr	.\StraightCapillary.py	/^import xrt.runner as xrtr$/;"	i
xrtr	.\myCapillary0A.py	/^import xrt.runner as xrtr$/;"	i
xrtr	.\realisticPolycapillary.py	/^import xrt.runner as xrtr$/;"	i
xrtr	.\simplfiedMonoCapillary.py	/^import xrt.runner as xrtr$/;"	i
xrtr	.\simplfiedPolyCapillary.py	/^import xrt.runner as xrtr$/;"	i
xyz_to_param	.\StraightCapillary.py	/^    def xyz_to_param(self, x, y, z):$/;"	m	class:StraightCapillary
xyz_to_param	.\myCapillary0A.py	/^    def xyz_to_param(self, x, y, z):$/;"	m	class:BentCapillary
xyz_to_param	.\realisticPolycapillary.py	/^    def xyz_to_param(self, x, y, z):$/;"	m	class:BentCapillary
xyz_to_param	.\realisticPolycapillary.py	/^    def xyz_to_param(self, x, y, z):$/;"	m	class:Pinhole
xyz_to_param	.\simplfiedMonoCapillary.py	/^    def xyz_to_param(self, x, y, z):$/;"	m	class:StraightCapillary
xyz_to_param	.\simplfiedPolyCapillary.py	/^    def xyz_to_param(self, x, y, z):$/;"	m	class:BentCapillary
xzPrimeMax	.\StraightCapillary.py	/^xzPrimeMax = 3.$/;"	v
xzPrimeMax	.\myCapillary0A.py	/^xzPrimeMax = 3.$/;"	v
y	.\LensPolynomial.py	/^    y = p[0] + p[1]*x + p[2]*x**2 + p[3]*x**3 + p[4]*x**4 + p[5]*x**5$/;"	v
y	.\solverTesting.py	/^    y = p[0] + p[1]*x + p[2]*x**2 + p[3]*x**3 + p[4]*x**4 + p[5]*x**5$/;"	v
y0	.\realisticPolycapillary.py	/^y0 =    0.      # relative light source position$/;"	v
y1	.\realisticPolycapillary.py	/^y1 =    40.     # lens entrance$/;"	v
y2	.\realisticPolycapillary.py	/^y2 =    140.    # lens exit$/;"	v
y_in	.\simplfiedMonoCapillary.py	/^y_in    = 1.12              # entrance height$/;"	v
yf	.\realisticPolycapillary.py	/^yf =    155.    # focus position$/;"	v
ym	.\realisticPolycapillary.py	/^ym =    88.     # capillaries turning point$/;"	v
ypin	.\realisticPolycapillary.py	/^ypin    = 150.0         # Optical path position [mm]$/;"	v
zLimits	.\SourceViewer.py	/^zLimits = xLimits       # axis square$/;"	v
