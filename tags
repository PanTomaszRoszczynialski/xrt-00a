!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BentCapillary	CapillaryElements.py	/^class BentCapillary(Capillary):$/;"	c
BentCapillary	myCapillary0A.py	/^class BentCapillary(roe.OE):$/;"	c
Capillary	CapillaryElements.py	/^class Capillary(roe.OE):$/;"	c
D	LensPolynomial.py	/^    D = {'Din' : 4.5, 'Dout' : 2.4, 'Dmax' : 8.0}$/;"	v
D_settings	realisticPolycapillary.py	/^D_settings = {'Din' : Din, 'Dout' : Dout, 'Dmax' : Dmax}$/;"	v
Din	realisticPolycapillary.py	/^Din =   4.5     # lens entrance diameter$/;"	v
Dmax	realisticPolycapillary.py	/^Dmax =  8.      # max diameter$/;"	v
Dout	realisticPolycapillary.py	/^Dout =  2.4     # lens exit diameter$/;"	v
E0	SourceViewer.py	/^E0      = 9000  # [eV]$/;"	v
E0	myCapillary0A.py	/^E0 = 9000.$/;"	v
E0	realisticPolycapillary.py	/^E0      = 9000.         # energy in electronoVolts$/;"	v
HexStructure	simulate_spoly.py	/^class HexStructure(object):$/;"	c
Kolo1	hex_shape_m/ks/Kolo1.m	/^function i = Kolo1(r1,r2,value)$/;"	f
Kolo1Gaus	hex_shape_m/ks/Kolo1Gaus.m	/^function i = Kolo1Gaus(r1,r2,value)$/;"	f
Kolo3poprawka	hex_shape_m/ks/Kolo3poprawka.m	/^function angleData = Kolo3poprawka(n,r1,r2,value,chaos,gauss,sigmaintens,sigmareject)$/;"	f
N_	SourceViewer.py	/^N_      = 5     # number of step to take$/;"	v
Pinhole	CapillaryElements.py	/^class Pinhole(StraightCapillary):$/;"	c
PolyCapillaryLens	CapillaryElements.py	/^class PolyCapillaryLens(object):$/;"	c
StraightCapillary	CapillaryElements.py	/^class StraightCapillary(Capillary):$/;"	c
__init__	CapillaryElements.py	/^    def __init__(self, **kwargs):$/;"	m	class:PolyCapillaryLens
__init__	CapillaryElements.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:BentCapillary
__init__	CapillaryElements.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Capillary
__init__	CapillaryElements.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Pinhole
__init__	CapillaryElements.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:StraightCapillary
__init__	myCapillary0A.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:BentCapillary
__init__	simulate_spoly.py	/^                ny_bundle = 7):$/;"	m	class:HexStructure
ax1	LensPolynomial.py	/^    ax1 = plt.subplot(111, label='dupa')$/;"	v
bl_height	SourceViewer.py	/^bl_height   = 0.$/;"	v
bl_xzMax	SourceViewer.py	/^bl_xzMax    = 0.$/;"	v
build_beamline	SourceViewer.py	/^def build_beamline(nrays=1000):$/;"	f
build_beamline	myCapillary0A.py	/^def build_beamline(nrays=1000):$/;"	f
build_beamline	realisticPolycapillary.py	/^def build_beamline(nrays=1e4):$/;"	f
capillaryParameters	CapillaryElements.py	/^    def capillaryParameters(self, x_in, roll, beamLine):$/;"	m	class:PolyCapillaryLens
capillary_bundle_xy	hex_shape_m/capillary_bundle_xy.m	/^function [xci,yci] = capillary_bundle_xy(xbundle,ybundle,capillary_diameter,channel_diameter,nx_capillary,sigma)$/;"	f
capillary_bundle_xy	simulate_spoly.py	/^    def capillary_bundle_xy(self, xbundle, ybundle, sigma):$/;"	m	class:HexStructure
capillary_circle	hex_shape_m/capillary_circle.m	/^function [z]=capillary_circle(X,Y,x0,y0,capillary_diameter,channel_diameter)$/;"	f
capillary_circle	hex_shape_m/capillary_gauss.m	/^function [z]=capillary_circle(X,Y,x0,y0,capillary_diameter,channel_diameter)$/;"	f
capillary_lens_xy	hex_shape_m/capillary_lens_xy.m	/^function [xi,yi,xci,yci] = capillary_lens_xy(nY_bundle,bundlespacing,capillary_diameter,channel_diameter,nx_capillary,sigma)$/;"	f
capillary_lens_xy	simulate_spoly.py	/^    def capillary_lens_xy(self, sigma_position = 0.1):$/;"	m	class:HexStructure
conv_fft2	hex_shape_m/conv_fft2.m	/^function y = conv_fft2(x, m, shape)$/;"	f
createPlots	screening.py	/^def createPlots(beamLine, save=False):$/;"	f
createScreens	screening.py	/^def createScreens(beamLine, ranges, howmany):$/;"	f
cunter	screening.py	/^cunter = 0$/;"	v
diff_coeffs	LensPolynomial.py	/^def diff_coeffs(x):$/;"	f
distx	SourceViewer.py	/^distx       = 'flat'$/;"	v
distx	realisticPolycapillary.py	/^distx       = 'flat'$/;"	v
distxprime	SourceViewer.py	/^distxprime  = 'flat'$/;"	v
distxprime	realisticPolycapillary.py	/^distxprime  = 'flat'$/;"	v
distz	SourceViewer.py	/^distz       = 'flat'$/;"	v
distz	realisticPolycapillary.py	/^distz       = 'flat'$/;"	v
distzprime	SourceViewer.py	/^distzprime  = 'flat'$/;"	v
distzprime	realisticPolycapillary.py	/^distzprime  = 'flat'$/;"	v
dx	SourceViewer.py	/^dx          = 0.1$/;"	v
dx	realisticPolycapillary.py	/^dx          = 0.1$/;"	v
dxprime	SourceViewer.py	/^dxprime     = 0.1$/;"	v
dxprime	realisticPolycapillary.py	/^dxprime     = 0.1$/;"	v
dz	SourceViewer.py	/^dz          = 0.1$/;"	v
dz	realisticPolycapillary.py	/^dz          = 0.1$/;"	v
dzprime	SourceViewer.py	/^dzprime     = 0.1$/;"	v
dzprime	realisticPolycapillary.py	/^dzprime     = 0.1$/;"	v
exindex	hex_shape_m/exindex.m	/^function arr = exindex(arr, varargin)$/;"	f
exposeScreens	screening.py	/^def exposeScreens(beamLine, beamToBeSeen, _range):$/;"	f
extend	hex_shape_m/exindex.m	/^function [ind, tofill] = extend(ind, rule, s)$/;"	f
f	myCapillary0A.py	/^f = 500. # y length in mm from foucs to the end of the lens$/;"	v
fig1	LensPolynomial.py	/^    fig1 = plt.figure(1,figsize=(10,4))$/;"	v
genPolars	simulate_spoly.py	/^    def genPolars(self):$/;"	m	class:HexStructure
getCapillaries	CapillaryElements.py	/^    def getCapillaries(self, beamLine):$/;"	m	class:PolyCapillaryLens
getCapillaryRadius	simulate_spoly.py	/^    def getCapillaryRadius(self):$/;"	m	class:HexStructure
getPolyCoeffs	LensPolynomial.py	/^def getPolyCoeffs(x,y,D):$/;"	f
getRadiusCoeffs	LensPolynomial.py	/^def getRadiusCoeffs(y, r):$/;"	f
getinputs	hex_shape_m/exindex.m	/^function [exindices, rules, nd, sz] = getinputs(arr, varargin)$/;"	f
hello	simulate_spoly.py	/^    hello = HexStructure(nx_capillary=17, ny_bundle=7)$/;"	v
isInHexagon	simulate_spoly.py	/^    def isInHexagon(self, x, y, d):$/;"	m	class:HexStructure
isinhexagon	hex_shape_m/isinhexagon.m	/^function [ inhexagon ] = isinhexagon(x,y,d)$/;"	f
layers	myCapillary0A.py	/^layers = 10 # number of hexagonal layers$/;"	v
local_n	CapillaryElements.py	/^    def local_n(self, s, phi):$/;"	m	class:Capillary
local_n	myCapillary0A.py	/^    def local_n(self, s, phi):$/;"	m	class:BentCapillary
local_r	CapillaryElements.py	/^    def local_r(self, s, phi):$/;"	m	class:Capillary
local_r	myCapillary0A.py	/^    def local_r(self, s, phi):$/;"	m	class:BentCapillary
local_r0	CapillaryElements.py	/^    def local_r0(self, s):$/;"	m	class:Capillary
local_r0	myCapillary0A.py	/^    def local_r0(self, s):  # radius of capillary (s)$/;"	m	class:BentCapillary
local_r0Prime	CapillaryElements.py	/^    def local_r0Prime(self,s):$/;"	m	class:Capillary
local_r0Prime	myCapillary0A.py	/^    def local_r0Prime(self, s):$/;"	m	class:BentCapillary
local_x0	CapillaryElements.py	/^    def local_x0(self, s):$/;"	m	class:Capillary
local_x0	myCapillary0A.py	/^    def local_x0(self, s):  # axis of capillary, x(s)$/;"	m	class:BentCapillary
local_x0Prime	CapillaryElements.py	/^    def local_x0Prime(self, s):$/;"	m	class:Capillary
local_x0Prime	myCapillary0A.py	/^    def local_x0Prime(self, s):$/;"	m	class:BentCapillary
mGlass	myCapillary0A.py	/^mGlass = rm.Material(('Si', 'O'), quantities=(1, 2), rho=2.2)$/;"	v
mGlass	realisticPolycapillary.py	/^mGlass  = rm.Material(('Si', 'O'), quantities=(1, 2), rho=2.2)$/;"	v
mGold	CapillaryElements.py	/^mGold   = rm.Material('Au', rho=19.3)$/;"	v
main	SourceViewer.py	/^def main():$/;"	f
main	myCapillary0A.py	/^def main():$/;"	f
main	realisticPolycapillary.py	/^def main():$/;"	f
matrixResize	hex_shape_m/ks/matrixResize.m	/^function result = matrixResize(image, new_size)$/;"	f
min_d	SourceViewer.py	/^min_d   = 0     # [mm] | source - screen distance$/;"	v
mvnpdf	hex_shape_m/ks/mvnpdf.m	/^function pdf = mvnpdf(x,mu,sigma)$/;"	f
nRefl	myCapillary0A.py	/^nRefl = 12$/;"	v
nRefl	realisticPolycapillary.py	/^nRefl   = 125           # number of reflections$/;"	v
nReflDisp	myCapillary0A.py	/^nReflDisp = 12 # unused$/;"	v
nearestpow2	hex_shape_m/ks/nearestpow2.m	/^function y = nearestpow2(x)$/;"	f
nx_capillary	realisticPolycapillary.py	/^nx_capillary = 13 $/;"	v
ny_bundle	realisticPolycapillary.py	/^ny_bundle = 17$/;"	v
odd	hex_shape_m/odd.m	/^function [out] = odd(number)$/;"	f
p	LensPolynomial.py	/^    p = getPolyCoeffs(x_in,y,D)$/;"	v
padarrays	hex_shape_m/conv_fft2.m	/^function [x, m, fsize] = padarrays(x, m, shape)$/;"	f
param_to_xyz	CapillaryElements.py	/^    def param_to_xyz(self, s, phi, r):$/;"	m	class:Capillary
param_to_xyz	myCapillary0A.py	/^    def param_to_xyz(self, s, phi, r):$/;"	m	class:BentCapillary
picklePaths	realisticPolycapillary.py	/^picklePaths = glob.glob('pickle\/*.pickle')$/;"	v
pinlen	realisticPolycapillary.py	/^pinlen  = 0.01                # Length $/;"	v
plot2D	PlotMono.py	/^def plot2D(beamLine):$/;"	f
plot2D	myCapillary0A.py	/^def plot2D():$/;"	f
processes	SourceViewer.py	/^processes = 8$/;"	v
processes	realisticPolycapillary.py	/^    processes = 1$/;"	v
processes	realisticPolycapillary.py	/^processes = 8           # number of processes used$/;"	v
r0	myCapillary0A.py	/^r0 = 0.0030$/;"	v
rIn	realisticPolycapillary.py	/^rIn =   0.006     # capillary radius$/;"	v
rSample	myCapillary0A.py	/^rSample = 100. # starting position of the lens$/;"	v
repeats	SourceViewer.py	/^repeats = 1e4   # liczba$/;"	v
repeats	realisticPolycapillary.py	/^    repeats = 100$/;"	v
repeats	realisticPolycapillary.py	/^repeats = 5e4           # number of ray traycing iterations$/;"	v
rpin	realisticPolycapillary.py	/^rpin    = 0.015               # Pinhole radius [mm] | =Dout\/10. $/;"	v
run_process	SourceViewer.py	/^def run_process(beamLine, shineOnly1stSource=False):$/;"	f
run_process	myCapillary0A.py	/^def run_process(beamLine, shineOnly1stSource=False):$/;"	f
run_process	realisticPolycapillary.py	/^def run_process(beamLine, shineOnly1stSource=False):$/;"	f
save	realisticPolycapillary.py	/^save    = True          # save results as pickles?$/;"	v
setStructure	CapillaryElements.py	/^    def setStructure(self, structure):$/;"	m	class:PolyCapillaryLens
setUsed	screening.py	/^def setUsed(beamLine, _range):$/;"	f
shape_coeffs	LensPolynomial.py	/^def shape_coeffs(x):$/;"	f
skryptPoprawka2	hex_shape_m/ks/skryptPoprawka2.m	/^function b = skryptPoprawka2(nhex,nkap,r1,r2,chaos,gauss)$/;"	f
step	SourceViewer.py	/^step    = 10    # [mm] | screen step size$/;"	v
test	simulate_spoly.py	/^    def test(self):$/;"	m	class:HexStructure
wall	myCapillary0A.py	/^wall = 0.02$/;"	v
wall	realisticPolycapillary.py	/^wall =   0.001 # |*50 make wider walls for structure visibility$/;"	v
x	LensPolynomial.py	/^    x = np.linspace(y['y1'],y['y2'],1000)$/;"	v
x2	LensPolynomial.py	/^    x2 = x_in * D['Dout'] \/ D['Din']$/;"	v
xLimits	SourceViewer.py	/^xLimits = [-6.05, 6.05] # Plot limits$/;"	v
x_in	LensPolynomial.py	/^    x_in = -1.1$/;"	v
xyz_to_param	CapillaryElements.py	/^    def xyz_to_param(self, x, y, z):$/;"	m	class:Capillary
xyz_to_param	myCapillary0A.py	/^    def xyz_to_param(self, x, y, z):$/;"	m	class:BentCapillary
xzPrimeMax	myCapillary0A.py	/^xzPrimeMax = 3.$/;"	v
y	LensPolynomial.py	/^    y = {'y0' : 0., 'y1' : 40., 'ym' : 85, 'y2' : 140, 'yf' : 155}$/;"	v
y0	realisticPolycapillary.py	/^y0 =    0.      # relative light source position$/;"	v
y1	realisticPolycapillary.py	/^y1 =    40.     # lens entrance$/;"	v
y2	realisticPolycapillary.py	/^y2 =    140.    # lens exit$/;"	v
y_settings	realisticPolycapillary.py	/^y_settings = {'y0' : y0, 'y1' : y1, 'y2' : y2, 'ym' : ym, 'yf' : yf}$/;"	v
yf	realisticPolycapillary.py	/^yf =    155.    # focus position$/;"	v
yfin	LensPolynomial.py	/^    yfin = p[0] + p[1]*x + p[2]*x**2 + p[3]*x**3 + p[4]*x**4 + p[5]*x**5$/;"	v
ym	realisticPolycapillary.py	/^ym =    88.     # capillaries turning point$/;"	v
ypin	realisticPolycapillary.py	/^ypin    = 155 - pinlen        # Optical path position$/;"	v
zLimits	SourceViewer.py	/^zLimits = xLimits       # axis square$/;"	v
